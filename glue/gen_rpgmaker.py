""" SoLoud RPG Maker wrapper generator """
 
import soloud_codegen

fi = open("rpgmaker_dltemplate.rb", "r")
fo = open("rpgmaker_soloud.rb", "w")

SOLOUD_TYPES = []

for x in soloud_codegen.soloud_type:
    SOLOUD_TYPES.append(x + " *")


def fudge_types(origtype):
    """ Map ctypes to parameter types """
    return C_TO_PY_TYPES[origtype]

def has_ex_variant(funcname):
    """ Checks if this function has an "Ex" variant """    
    if funcname[-2::] == "Ex":
        # Already an Ex..
        return False
    for func in soloud_codegen.soloud_func:
        if func[1] == (funcname + "Ex"):
            return True
    return False

fo.write("#===============================================================================\n")
fo.write("# SoLoud Wrapper for RPG Maker\n")
fo.write("#-----------------------------------------------------------------------------\n")
fo.write('# Author  : Gabriel "Gab!" Teles\n')
fo.write("# License : ZLib/LibPNG\n")
fo.write("# Website : http://www.mundorpgmaker.com.br/\n")
fo.write("#-----------------------------------------------------------------------------\n")
fo.write('# Only joins "DL/*.rb" to SoLoud Ruby Wrapper in order to run on RPG Maker. \n')
fo.write("# SoLoud wrapper for Ruby\n")
fo.write("# This file is autogenerated; any changes will be overwritten\n")
fo.write("#===============================================================================\n")
fo.write("\n")
fo.write(fi.read()) # "DL/Import.rb" & dependencies
fo.write("\n")
fo.write('module SoLoud\n')
fo.write('\tmodule CAPI\n')
fo.write('\t\textend DL::Importer\n')
fo.write("\t\tdlload 'system/soloud_x86.dll'\n")
fo.write("\n")

fo.write("\t\t# Enumerations\n")
for x in soloud_codegen.soloud_enum:
    fo.write('\t\t' + x + '=' + str(soloud_codegen.soloud_enum[x])+ '\n')
fo.write("\n")
fo.write("\t\t# Raw DLL functions\n")

for x in soloud_codegen.soloud_func:
    fo.write('\t\textern "' + x[0] + ' ' + x[1] + '(')
    first = True
    for y in x[2]:
        if len(y) > 0:
            if first:
                first = False
            else:
                fo.write(", ")
            fo.write(y[0])
    fo.write(')"\n')

fo.write('\tend\n')
fo.write('\n')

#
# oop
#

fo.write('\n')
fo.write('\t# OOP wrappers\n')

def fix_default_param(defparam, classname):
    """ 'fixes' default parameters from C to what python expectes """
    if (classname + '::') == defparam[0:len(classname)+2:]:
        return defparam[len(classname)+2::]
    if defparam[len(defparam)-1] == "f":
        return defparam[0:len(defparam)-1]
    return defparam



for x in soloud_codegen.soloud_type:
    first = True
    for y in soloud_codegen.soloud_func:
        if (x + "_") == y[1][0:len(x)+1:]:
            if first:
                fo.write('\n')
                fo.write('\tclass %s\n'%(x))
                fo.write('\t\tattr_reader :objhandle\n')
                for z in soloud_codegen.soloud_enum:
                    if z[0:len(x)+1] == x.upper()+'_':
                        s = str(soloud_codegen.soloud_enum[z])
                        fo.write('\t\t%s=%s\n'%(z[len(x)+1::], s))
                fo.write('\t\tdef initialize()\n')
                fo.write('\t\t\t@objhandle = SoLoud::CAPI.%s_create()\n'%(x))
                fo.write('\t\tend')
                fo.write('\t\n')
                fo.write('\t\tdef destroy()\n')
                fo.write('\t\t\tSoLoud::CAPI.%s_destroy(@objhandle)\n'%(x))
                fo.write('\t\tend')
                fo.write('\n')
                
                first = False
            funcname = y[1][len(x)+1::]
            # If the function has the name "Ex", remove the subfix
            if funcname[-2::] == "Ex":
                funcname = funcname[:len(funcname)-2]
            # Skip generating functions that have an Ex variant            
            if funcname == "create" or funcname == "destroy" or has_ex_variant(y[1]):
                pass # omit create/destroy, handled by initialize/destroy
            else:
                fo.write('\t\tdef %s('%(funcname))
                firstparam = True
                for z in y[2]:
                    if len(z) > 1:
                        if z[1] == 'a'+x:
                            pass # skip the 'self' pointer
                        else:
                            if firstparam:
                                firstparam = False
                            else:
                                fo.write(', ')
                            fo.write(z[1])
                            if len(z) > 2:
                                fo.write("=" + fix_default_param(z[2], x)+"")
                fo.write(')\n')
                fo.write('\t\t\t')
                fo.write('SoLoud::CAPI.' + y[1] + '(@objhandle')
                for z in y[2]:
                    if len(z) > 1:
                        if z[1] == 'a'+x:
                            pass # skip the 'self' pointer
                        else:
                            fo.write(', ')
                            if z[0] in SOLOUD_TYPES:
                                fo.write(z[1] + '.objhandle')
                            else:
                                fo.write(z[1])
                fo.write(')\n')            
                fo.write('\t\tend\n')
    if not first:
        fo.write('\tend\n')
fo.write('end\n')

print "rpgmaker_soloud.rb generated"

fi.close()
fo.close()